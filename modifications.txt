commit 1db77777ed20afdf93162f6e383c68a6e59c7075
Author: Shams230514 <84643634+Shams230514@users.noreply.github.com>
Date:   Tue May 27 09:46:43 2025 +0000

    subscribe backend added

diff --git a/app/api/subscribe/route.ts b/app/api/subscribe/route.ts
new file mode 100644
index 0000000..2df5c21
--- /dev/null
+++ b/app/api/subscribe/route.ts
@@ -0,0 +1,60 @@
+import { sendSubscribeNotificationMail, sendSubscribeWelcomeMail } from "@/utils/mail";
+import { forwardSubscriptionData, stringToBool } from "@/utils/misc";
+
+export async function POST(request: Request) {
+  const requiredVars = [
+    "SMTP_HOST",
+    "SMTP_USERNAME",
+    "SMTP_PASSWORD",
+    "SMTP_PORT",
+    "SMTP_TLS",
+    "EMAIL_RECIPIENTS"
+  ];
+  for (const varName of requiredVars) {
+    if (process.env[varName]) continue;
+    console.log(`ERROR: Missing variable '${varName}'.`);
+    return new Response(JSON.stringify({}), { status: 500 });
+  }
+
+  const transport = {
+    host: process.env.SMTP_HOST!,
+    port: +process.env.SMTP_PORT!,
+    secure: stringToBool(process.env.SMTP_TLS),
+    auth: { user: process.env.SMTP_USERNAME!, pass: process.env.SMTP_PASSWORD! }
+  };
+
+  const recipientEmails = process.env
+    .EMAIL_RECIPIENTS!.split(",")
+    .map((mail) => mail.trim());
+
+  const body: Record<string, string | undefined> = await request.json();
+  console.log("Subscription Data: " + JSON.stringify(body));
+
+  // Validation basique pour l'abonnement (au minimum l'email)
+  if (!body.email) {
+    return new Response(JSON.stringify({ error: "Email is required" }), { status: 400 });
+  }
+
+  const notificationSuccess = await sendSubscribeNotificationMail(
+    transport,
+    recipientEmails,
+    body
+  );
+
+  sendSubscribeWelcomeMail(transport, {
+    language: body.language || "fr",
+    email: body.email!,
+    firstName: body.firstName || "",
+    lastName: body.lastName || ""
+  })
+    .then(() => {})
+    .catch(() => {});
+
+  if (process.env.SUBSCRIBE_ENDPOINT) {
+    forwardSubscriptionData(process.env.SUBSCRIBE_ENDPOINT, body)
+      .then(() => {})
+      .catch(() => {});
+  }
+
+  return new Response(undefined, { status: notificationSuccess ? 201 : 500 });
+}
diff --git a/utils/mail.ts b/utils/mail.ts
index 2c14929..738b71d 100644
--- a/utils/mail.ts
+++ b/utils/mail.ts
@@ -83,3 +83,99 @@ function getSignupText({ lang, name }: { lang: string; name: string }) {
   
   Equipe Support Heritage`;
 }
+
+// Subscribe
+
+export const sendSubscribeNotificationMail = async (
+  smtpTransport: SMTPTransport.Options,
+  recipientEmails: string[],
+  body: Record<string, string | undefined>
+) => {
+  const transporter = createTransport(smtpTransport);
+  try {
+    const sentMail = await transporter.sendMail({
+      to: recipientEmails.join(", "), // list of receivers
+      subject: `[Heritage Notification] New Newsletter Subscription`, // Subject line
+      text: `New newsletter subscription:\n${JSON.stringify(body, null, 2)}`
+    });
+
+    console.log("Sent subscription notification mail: %s", sentMail.messageId);
+    return true;
+  } catch (err) {
+    console.log(err, "ERROR: Failed to send subscription notification mail");
+    return false;
+  } finally {
+    transporter.close();
+  }
+};
+
+export const sendSubscribeWelcomeMail = async (
+  smtpTransport: SMTPTransport.Options,
+  args: { email: string; language: string; firstName: string; lastName: string }
+) => {
+  const transporter = createTransport(smtpTransport);
+  try {
+    const sentMail = await transporter.sendMail({
+      to: args.email,
+      subject: getSubscribeSubject(args.language),
+      text: getSubscribeText({
+        lang: args.language,
+        name:
+          args.firstName && args.lastName
+            ? `${args.firstName} ${args.lastName}`.trim()
+            : args.firstName || args.email
+      })
+    });
+
+    console.log("Sent subscribe welcome mail: %s", sentMail.messageId);
+    return true;
+  } catch (err) {
+    console.log(err, "ERROR: Failed to send subscribe welcome mail");
+    return false;
+  } finally {
+    transporter.close();
+  }
+};
+
+function getSubscribeSubject(lang?: string) {
+  if (lang === "en") return "Welcome to Heritage Newsletter";
+  return "Bienvenue dans la newsletter Heritage";
+}
+
+function getSubscribeText({ lang, name }: { lang: string; name: string }) {
+  if (lang === "en") {
+    return `
+Hello ${name},
+
+Thank you for subscribing to the Heritage newsletter!
+
+We're excited to have you join our community. You'll receive our latest updates, news, and exclusive content directly in your inbox.
+
+Stay tuned for our upcoming newsletters featuring insights about heritage web services, industry trends, and exclusive offers.
+
+If you have any questions, feel free to contact us.
+
+Best regards,
+The Heritage Team
+
+---
+If you wish to unsubscribe, please contact us and we'll remove you from our mailing list.`;
+  }
+
+  return `
+Bonjour ${name},
+
+Merci de vous être abonné(e) à la newsletter Heritage !
+
+Nous sommes ravis de vous accueillir dans notre communauté. Vous recevrez nos dernières actualités, nouveautés et contenus exclusifs directement dans votre boîte mail.
+
+Restez à l'écoute pour nos prochaines newsletters avec des informations sur les services web d'Heritage, les tendances du secteur et des offres exclusives.
+
+Si vous avez des questions, n'hésitez pas à nous contacter.
+
+Cordialement,
+L'équipe Heritage
+
+---
+Si vous souhaitez vous désabonner, contactez-nous et nous vous retirerons de notre liste de diffusion.`;
+}
diff --git a/utils/misc.ts b/utils/misc.ts
index c1f7660..08462f9 100644
--- a/utils/misc.ts
+++ b/utils/misc.ts
@@ -76,3 +76,17 @@ export async function forwardRegistrationData(
   });
   console.log(`Forwarding registration completed with status: ${result.status}`);
 }
+
+// Subscribe
+
+export async function forwardSubscriptionData(
+  endpoint: string,
+  body: Record<string, string | undefined>
+) {
+  const result = await fetch(endpoint, {
+    method: "POST",
+    headers: { "Content-Type": "application/json" },
+    body: JSON.stringify(body)
+  });
+  console.log(`Forwarding subscription completed with status: ${result.status}`);
+}
